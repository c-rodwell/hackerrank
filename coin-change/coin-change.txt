"coin change" hackerrank problem: https://www.hackerrank.com/challenges/coin-change

given set of coin values and total sum to make, find ways of making that sum
ex: values = [8,3,1,2] and total = 3, solutions are {1,1,1}, {1,2}, {3}

compute only the number of ways to make change, not the ways 
(maybe that will simplify the algorithm)

getWays(n,c) 
inputs: n positive integer, amount to make change for
	c array of positive integers of the available coin values

based on example: can repeat each coin value any number of times like 1+1+1 = 3
so there's no need for repetitions in the value list - can I assume none?

also order doesn't matter in a set of coins: {1,2} and {2,1} count as the same


___________strategies:___________

could use recursive / dynamic programming

if n is smaller than smallest value in c, no solution.

if n larger than some value in c, subtract that value
then, need to make the remaining amount from c

as base case, can pass if n = 0 and fail if n < 0
	or only allow subtracting a value smaller than n

need to avoid counting {1,2} and {2,1} as separate solutions

ordering - either we use the largest coin value or we don't
use it - n decreases, c is the same (maybe can use largest coin again)
dont use it - n is same, c loses that largest value

so each time, n or c shrinks - eventually hit n = 0 or c = [] base cases.

preprocess - sort c, remove duplicates if any.

can use the largest coin or not - these are mutually exclusive sets of solutions.
	so total ways is sum of the two subsets

ways(n, c) = ways(n-c[0], c) + ways(n, c[1:])

if n <= 0, return 0  (actually should be 1)
if c empty, return 0

check base case logic:

ways(1, [1]) = ways(0, [1]) + ways(1, []) = 0 + 0 = 0

but we should have ways(1, [1]) = 1

so it makes more sense to say ways(0,c) = 1: there is one way to not use any of the coins
then, ways(1, [1]) = ways(0, [1]) + ways(1, []) = 1 + 0 = 1

ways(1, [2]) should be 0: can't make total 1 from a coin worth 2.
ways(1, [2]) = ways(-1, [2]) + ways(1, []) 

we can say ways(n,c) = 0 if n <0 : no way to add to a negative number.
then ways(1,[2]) = 0 + 0 = 0 as expected.

base cases are:
n = 0: return 1	- there is one way to make 0, by using none of the coins
n < 0: return 0 - there is no way to add up positive coin values to make negative
c = []: return 0 - no way to make a value using no coins.

ways(0, []) is hard to define but we shouldn't need that: 
recursion shrinks n or c, but not both together. so will hit a base case first.


________implementation structures___________:
simple recursive - should be decently efficient since this way shoudnt repeat sub-problems. but could hit stack limit
	actually no, same sub-problem could be reached by different routes, so its probably very inefficient

memoized recursive - more efficient but may overflow stack

explicit stack iterative-recursive with popping and entering elements
	gets around stack size issues but more complicated to write

direct iteration - go through the n,c space in a specific order.
	2d space: n by m(index of c) - iterate backward from base cases.
	this could be simplest code that avoids stack limit, often the most efficient
	but could compute sub-problems that arent used in final answer,
		like all n subtotals from 0 to the argument n, when only some will be used.



_________pseudocode____________

maybe start by sorting c. (c was stated to be all distinct, but they didnt say its sorted. or is this even necessary to sort distinct list?)
	distinct - use coin value 3 or not are mutually exclusive sets of possiblities since there is no other coin of value 3.


___recursive___

ways(n, c):
	if n < 0 : return 0
	if n == 0: return 1
	if c empty: return 0
	return ways(n-c[0], c) + ways(n, c[1:])


variations - pass different subsets of c, or whole c with an index


___memoized recursive___: just do a @lru_cache tag on it

or do a memoized wrapper:


ways(n,c):
	memo = {}
	return ways_inner(n,c,memo)

ways_inner(n, c, memo):
	if (n,c) in memo: return memo[(n,c)]
	elif n < 0 : retval = 0
	elif n == 0: retval = 1
	elif c empty: retval = 0
	else retval = ways_inner(n-c[0], c, memo) + ways_inner(n, c[1:], memo)
	memo[(n,c)] = retval
	return retval

sometimes I initialize memo with base cases in wrapper, but not sure how to do that here
	might be more efficient since it reduces condition checks. but here, would need " n = 0 for any c", etc


	
___iterating backward____:

iterate from base cases back to the beggining.
problem space: ni = 0 to n, mi = 0 to m-1 (index in c)
double loop - could put either inside

ways(n,c):
	m = len(c)
	totals = m+1 by n array

	#representation: totals[mi, ni] stores ways(ni, c[mi:end]

	initalize with 0 along mi = m edge (ways(n,[]) = 0)
	initialize with 1 along ni = 0 edge (ways(0,c) = 1)
	
	#iterate over non-initalized part
	for mi from m-1 to 0, backward:
		coin = c[mi]
		for ni from 1 to n:
			if coin <= ni:	#can use that coin
				totals[mi, ni] = totals[mi, ni - coin] + totals[mi+1,ni]
			else:
				totals[mi, ni] = totals[mi+1,ni]

		(altertnative structure to reduce condition checks:
		for ni from 1 to coin-1:
			totals[mi, ni] = totals[mi+1,ni]
		for ni from coin to n:
			totals[mi, ni] = totals[mi, ni - coin] + totals[mi+1,ni]
		)


	return totals[mi = 0, ni = n]
	

need to make sure this goes in right order so each sub-problem is done after the ones it depends on

